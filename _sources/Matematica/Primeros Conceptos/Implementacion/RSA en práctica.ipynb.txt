{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RSA en práctica"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Digamos que Andrés tienen algo muy importante que decirle a su amiga Sofía. Para que Andrés le pueda enviar el mensaje secreto, Sofía impleneta un sistema de RSA. Lo primero que hace entonces es seleccionar dos números primos $P$ y $Q$ muy grandes\n",
    "```{thebe-button} Correr el código.\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P = 467\n",
      "Q = 137\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def isPrime(n):\n",
    "    x=0\n",
    "    y=0\n",
    "    for i in range(2,n):\n",
    "        for j in range(i,n):\n",
    "            if i*j==n:\n",
    "                x=i\n",
    "                y=j\n",
    "                break\n",
    "        if x!=0:\n",
    "            break\n",
    "        \n",
    "    if x!=0:\n",
    "        return(False)\n",
    "    else:\n",
    "        return(True)\n",
    "\n",
    "a=100\n",
    "b=1000\n",
    "\n",
    "P = random.randint(a,b)\n",
    "while not isPrime(P):\n",
    "    P=random.randint(a,b)\n",
    "\n",
    "print(\"P =\",P)\n",
    "\n",
    "Q = random.randint(a,b)\n",
    "while not isPrime(Q):\n",
    "    Q=random.randint(a,b)\n",
    "\n",
    "print(\"Q =\",Q)\n",
    "\n",
    "N=P*Q\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Enseguida, Sofía calcula $N=P\\cdot Q$ y elije un exponente $e$ que tenga inverso multimplicativo módulo $\\varphi(N)$, es decir, un número $e$ para el cual exista otro número $d$ tal que $e\\cdot d=1$ (mod $\\varphi(N)$). Si este número no existe, entonces vuelve a escoger dos primos al azar $P$ y $Q$ y repite el proceso. Si este número sí existe, entonces este es su \"clave privada\" y ya estaría lista para publicar los números $N$ y $e$ para que Andrés pueda acceder a ellos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N = 97289\n",
      "e = 7\n",
      "d = 69043\n"
     ]
    }
   ],
   "source": [
    "c=5\n",
    "d=10\n",
    "e = random.randint(c,d)\n",
    "print(\"N =\",N)\n",
    "print(\"e =\",e)\n",
    "\n",
    "def egcd(a, b):\n",
    "    if a == 0:\n",
    "        return (b, 0, 1)\n",
    "    else:\n",
    "        g, y, x = egcd(b % a, a)\n",
    "        return (g, x - (b // a) * y, y)\n",
    "\n",
    "def modinv(a, m):\n",
    "    g, x, y = egcd(a, m)\n",
    "    if g != 1:\n",
    "        raise Exception('modular inverse does not exist')\n",
    "    else:\n",
    "        return x % m\n",
    "\n",
    "phiN=(P-1)*(Q-1)\n",
    "d=modinv(e,phiN)\n",
    "\n",
    "print(\"d =\",d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Con esta información, Andrés codifica el mensaje que le quiere enviar a Sofía. En este caso, el mensaje que le quiere enviar es \"te amo\". Supongamos que Andrés y Sofía ya habían hablado previamente sobre su relación y que Sofía decidió darle una oportunidad a Andrés para que le dijera lo que realmente sentía. Sofía le dio entonces un tiempo Andrés para que pensara y le dio la siguiente lista de códigos para cuando quisiera responderle: 1=si, 2=no, te=3, quiero=4, 5=amo, 6=ver.  El mensaje de Andrés codificado sería entonces $M=35$. Así, Andrés le hace público su mensaje a Sofía, pero encriptado para que nadie más sepa su respuesta, con la ayuda de $N$ y $e$, a saber, publica su mensaje encriptado $C=M^e$(mod $N$) que corresponde al número"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C = 38106\n"
     ]
    }
   ],
   "source": [
    "M=35 \n",
    "exp=M**e\n",
    "\n",
    "C=exp%N\n",
    "print(\"C =\",C)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Así, ahora Sofía puede obtener el mensaje descifrado de Andrés calculando $MD=C^d$ (mod$N$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MD = 35\n"
     ]
    }
   ],
   "source": [
    "\n",
    "exp=C**d\n",
    "m=exp%N\n",
    "print(\"MD =\",m)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De esta manera, Sofía se entera de que Andrés en efecto sí la ama y sabe que nadie más, además de ella y Andrés, lo sabe. Así, Sofía y Andrés pudieron comunicarse de manera segura y Andrés pudo decirle lo que realmente sentía a Sofía."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
