Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#se importa la libreria de PulP
import pulp as lp

#-----------------
# Conjuntos
#-----------------
#Zonas
M=[]
for i in range(1,37):
    M.append(i)

#Tipos de carb√≥n
K=["Antracita",
   "Hulla",
   "Turba",
   "Lignito"]

#-----------------
# Par√°metros
#-----------------
a={#(zona, tipo de carb√≥n): 1 si en la zona i se puede extraer carb√≥n del tipo j, 0 d.l.c.
    (1,"Antracita"):0,
    (1,"Hulla"):1,
    (1,"Turba"):0,
    (1,"Lignito"):0,
    (2,"Antracita"):0,
    (2,"Hulla"):1,
    (2,"Turba"):0,
    (2,"Lignito"):0,
    (3,"Antracita"):0,
    (3,"Hulla"):0,
    (3,"Turba"):1,
    (3,"Lignito"):0,
    (4,"Antracita"):0,
    (4,"Hulla"):0,
    (4,"Turba"):1,
    (4,"Lignito"):0,
    (5,"Antracita"):0,
    (5,"Hulla"):1,
    (5,"Turba"):0,
    (5,"Lignito"):0,
    (6,"Antracita"):0,
    (6,"Hulla"):0,
    (6,"Turba"):1,
    (6,"Lignito"):0,
    (7,"Antracita"):0,
    (7,"Hulla"):1,
    (7,"Turba"):0,
    (7,"Lignito"):0,
    (8,"Antracita"):0,
    (8,"Hulla"):1,
    (8,"Turba"):0,
    (8,"Lignito"):0,
    (9,"Antracita"):1,
    (9,"Hulla"):0,
    (9,"Turba"):0,
    (9,"Lignito"):0,
    (10,"Antracita"):1,
    (10,"Hulla"):0,
    (10,"Turba"):0,
    (10,"Lignito"):0,
    (11,"Antracita"):0,
    (11,"Hulla"):1,
    (11,"Turba"):0,
    (11,"Lignito"):0,
    (12,"Antracita"):0,
    (12,"Hulla"):0,
    (12,"Turba"):1,
    (12,"Lignito"):0,
    (13,"Antracita"):1,
    (13,"Hulla"):0,
    (13,"Turba"):0,
    (13,"Lignito"):0,
    (14,"Antracita"):0,
    (14,"Hulla"):0,
    (14,"Turba"):1,
    (14,"Lignito"):0,
    (15,"Antracita"):0,
    (15,"Hulla"):0,
    (15,"Turba"):1,
    (15,"Lignito"):0,
    (16,"Antracita"):0,
    (16,"Hulla"):1,
    (16,"Turba"):0,
    (16,"Lignito"):0,
    (17,"Antracita"):0,
    (17,"Hulla"):1,
    (17,"Turba"):0,
    (17,"Lignito"):0,
    (18,"Antracita"):0,
    (18,"Hulla"):0,
    (18,"Turba"):1,
    (18,"Lignito"):0,
    (19,"Antracita"):1,
    (19,"Hulla"):0,
    (19,"Turba"):0,
    (19,"Lignito"):0,
    (20,"Antracita"):0,
    (20,"Hulla"):0,
    (20,"Turba"):0,
    (20,"Lignito"):1,
    (21,"Antracita"):0,
    (21,"Hulla"):0,
    (21,"Turba"):1,
    (21,"Lignito"):0,
    (22,"Antracita"):1,
    (22,"Hulla"):0,
    (22,"Turba"):0,
    (22,"Lignito"):0,
    (23,"Antracita"):1,
    (23,"Hulla"):0,
    (23,"Turba"):0,
    (23,"Lignito"):0,
    (24,"Antracita"):1,
    (24,"Hulla"):0,
    (24,"Turba"):0,
    (24,"Lignito"):0,
    (25,"Antracita"):1,
    (25,"Hulla"):0,
    (25,"Turba"):0,
    (25,"Lignito"):0,
    (26,"Antracita"):0,
    (26,"Hulla"):0,
    (26,"Turba"):1,
    (26,"Lignito"):0,
    (27,"Antracita"):0,
    (27,"Hulla"):0,
    (27,"Turba"):1,
    (27,"Lignito"):0,
    (28,"Antracita"):0,
    (28,"Hulla"):0,
    (28,"Turba"):0,
    (28,"Lignito"):1,
    (29,"Antracita"):0,
    (29,"Hulla"):0,
    (29,"Turba"):0,
    (29,"Lignito"):1,
    (30,"Antracita"):0,
    (30,"Hulla"):0,
    (30,"Turba"):0,
    (30,"Lignito"):1,
    (31,"Antracita"):0,
    (31,"Hulla"):1,
    (31,"Turba"):0,
    (31,"Lignito"):0,
    (32,"Antracita"):0,
    (32,"Hulla"):0,
    (32,"Turba"):1,
    (32,"Lignito"):0,
    (33,"Antracita"):0,
    (33,"Hulla"):1,
    (33,"Turba"):0,
    (33,"Lignito"):0,
    (34,"Antracita"):1,
    (34,"Hulla"):0,
    (34,"Turba"):0,
    (34,"Lignito"):0,
    (35,"Antracita"):0,
    (35,"Hulla"):0,
    (35,"Turba"):0,
    (35,"Lignito"):1,
    (36,"Antracita"):1,
    (36,"Hulla"):0,
    (36,"Turba"):0,
    (36,"Lignito"):0} 

datosZonas={#zona: [costo por cada tonelada de carb√≥n extra√≠da en la zona i, capacidad m√°xima de extracci√≥n de carb√≥n (en toneladas) en la zona i] 
            (1):[16,189],
            (2):[6,196],
            (3):[11,143],
            (4):[8,136],
            (5):[5,106],
            (6):[25,151],
            (7):[16,170],
            (8):[17,129],
            (9):[25,184],
            (10):[8,122],
            (11):[15,146],
            (12):[8,190],
            (13):[10,160],
            (14):[20,109],
            (15):[6,133],
            (16):[17,198],
            (17):[6,138],
            (18):[20,107],
            (19):[5,117],
            (20):[8,150],
            (21):[25,171],
            (22):[11,103],
            (23):[8,157],
            (24):[7,143],
            (25):[7,170],
            (26):[28,130],
            (27):[26,140],
            (28):[27,126],
            (29):[9,180],
            (30):[24,153],
            (31):[15,108],
            (32):[14,132],
            (33):[22,105],
            (34):[20,145],
            (35):[19,145],
            (36):[8,114]}  

#par√°metros indexados en las zonas
(c, n)=lp.splitDict(datosZonas)


b={#m√≠nimo de toneladas a explotar del tipo de carb√≥n j
    ("Antracita"):862,
    ("Hulla"):898,
    ("Turba"):562,
    ("Lignito"):742}  

#-------------------------------------
# Creaci√≥n del objeto problema en PuLP
#-------------------------------------
#Crea el problema para cargarlo con la instancia 
problema=lp.LpProblem("Extracci√≥n Minera",lp.LpMinimize)

#-----------------------------
# Variables de Decisi√≥n
#-----------------------------
x=lp.LpVariable.dicts('x',M,lowBound=0,cat='Continuous') #toneladas de carb√≥n extra√≠do de la zona i; aca se a√±ade de una vez la naturaleza de las variables

#-----------------------------
# Funci√≥n objetivo
#-----------------------------
#Crea la expresi√≥n de minimizaci√≥n de costos
problema+=lp.lpSum(x[i]*c[i] for i in M), "Costos Totales"

#-----------------------------
# Restricciones
#-----------------------------
#sum(i in M)a_ij*x_i >= b_j forall j in K
for j in K:
    problema+= lp.lpSum(a[i,j]*x[i] for i in M) >= b[j], "M√≠nimo toneladas de extracci√≥n del tipo de carb√≥n "+j #se garantiza el m√≠nimo de toneladas extraidas del tipo de carb√≥n j

#x_i <= n_i*y_i forall i in M
for i in M:
    problema+= x[i] <= n[i], "M√°ximo toneladas de extracci√≥n de la zona "+str(i)   #se garantiza el m√°ximo de toneladas de carb√≥n que se pueden extraer de la zona i

#-----------------------------
# Imprimir formato LP
#-----------------------------
#Escribe el problema en un archivo con formato LP 
problema.writeLP("ExtraccionMinera.lp")

#-----------------------------
# Invocar el optimizador
#-----------------------------
#Optimizar el modelo con CBC (default de PuLP)
problema.solve()

#-----------------------------
#    Imprimir resultados
#-----------------------------
#Imprimir estado final del optimizador
print("Estado (optimizador):", lp.LpStatus[problema.status],end='\n')

#Valor √≥ptimo de extracci√≥n minera  
print("\nExtracci√≥n Minera - \033[1m Costos totales \033[0m = $", round(lp.value(problema.objective),2))
print()

#Imprimir variables de decisi√≥n
print('\033[1m'"Extracci√≥n de las zonas"'\033[0m')
for i in M:
    if x[i].value()>0.5:
        for j in K:
            if a[i,j]==1:
                print(str(i)+": "+str(x[i].value())+" toneladas de "+j)



------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-8524691dfa52>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m#se importa la libreria de PulP[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mpulp[0m [0;32mas[0m [0mlp[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;31m#-----------------[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;31m# Conjuntos[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'pulp'
ModuleNotFoundError: No module named 'pulp'

